// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts        Account[]
  sessions        Session[]
  user_settings   user_settings[]
  favorite_places favorite_places[]
  wallets         wallets[]
  transactions    transactions[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SearchQuery {
  id    String @id @default(cuid())
  query String
}

model wallets {
  id             String @id @unique @default(cuid())
  user_id        String
  wallet_address String
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model transactions {
  id           String          @id @unique @default(cuid())
  user_id      String
  place_id     String
  paymethod_id String
  amount       Decimal
  datetime     DateTime        @updatedAt
  user         User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  place        Places          @relation(fields: [place_id], references: [id], onDelete: Cascade)
  paymethod    payment_methods @relation(fields: [paymethod_id], references: [id], onDelete: Cascade)
}

model Places {
  id               String            @id @unique @default(cuid())
  name             String            @unique
  description      String?
  address          String            @unique
  latitude         Decimal?
  longitude        Decimal?
  google_places_id String?
  on_google_maps   Boolean           @default(false)
  profile_pic_url  String?           @default("")
  user_id          String
  phone_number     String?           @default("")
  products         Products[]
  pictures         picture_places[]
  favorite_places  favorite_places[]
  transactions     transactions[]
}

model picture_places {
  id       String @id @unique @default(cuid())
  place_id String
  url      String
  places   Places @relation(fields: [place_id], references: [id])
}

model user_settings {
  id        String   @id @unique @default(cuid())
  user_id   String
  key       String
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model system_settings {
  id    String  @id @unique @default(cuid())
  key   String
  value String?
}

model payment_methods {
  id               String         @id @unique @default(cuid())
  name             String?
  symbol           String?
  terms_policy_url String?
  transactions     transactions[]
  currencies       currencies[]
}

model currencies {
  id               String          @id @unique @default(cuid())
  paymethod_id     String
  name             String?
  symbol           String?
  contract_address String?
  payment_methods  payment_methods @relation(fields: [paymethod_id], references: [id], onDelete: Cascade)
}

model payment_methods_accepted {
  id           String @id @unique @default(cuid())
  paymethod_id String
  place_id     String
}

model global_tokens {
  id           String   @id @unique @default(cuid())
  key          String
  value        String
  duration     Int?
  is_permanent Boolean  @default(false)
  last_updated DateTime @updatedAt
}

model favorite_places {
  id       String @id @unique @default(cuid())
  user_id  String
  place_id String
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  places   Places @relation(fields: [place_id], references: [id], onDelete: Cascade)
}

// Blog Stuff

model BlogPost {
  id        Int     @id @default(autoincrement())
  title     String
  content   String? @db.Text
  published Boolean @default(false)
  //author    Account? @relation(fields: [authorId], references: [id])
  author    String
  imageUrl  String?
}

// E-Commerce/Products Stuff

model ProductCategories {
  id       Int        @id @default(autoincrement())
  name     String
  products Products[]
  image    String?
}

model Products {
  id               Int                 @id
  name             String
  price            Float
  image            String
  brand            String
  categories       ProductCategories[]
  isLimited        Boolean             @default(true)
  currentInventory Int
  description      String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  placeId          String
  place            Places              @relation(fields: [placeId], references: [id])
}
